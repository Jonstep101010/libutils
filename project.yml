---
:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_deep_dependencies: TRUE
  :use_auxiliary_dependencies: TRUE
  :use_auto_dependencies: TRUE
  :build_root: build
  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: gem
  :ceedling_version: '?'

:release_build:
  :output: libutils.a
  :use_assembly: FALSE
:paths:
  :source:
    - src/array/
    - src/string/
  :include:
    - +:include/


:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :common: &common_defines []
  :test:
    - *common_defines
    - TEST
  :test_preprocess:
    - *common_defines
    - TEST

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8

#:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use
:tools:
  :release_compiler:
    :executable: clang              #exists in system search path
    :name: 'clang release compiler'
    :arguments:
      - -g3
      - -Wall
      - -Wextra
      - -Werror
      - -I../libftprintf -I../libft -I./include
      - -MMD -MP
      - -c ${1}
      - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
      - -I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE
      - -o ${2}
  :release_linker:
    :executable: ar   #absolute file path
    :name: 'clang release linker'
    :arguments:
      - rcs
      - ${2}
      - ${1}
  :release_dependencies_generator:
    :executable: clang
    :name: Clang

:plugins:
  :load_paths:
    - "#{Ceedling.load_path}"
  :enabled:
    - xml_tests_report
    - compile_commands_json
...
